import java.util.*;

public class Graph {
    private Map<Integer, Set<Integer>> adjList;
    private int vertices;

    public Graph(int vertices) {
        this.vertices = vertices;
        this.adjList = new HashMap<>();
        initializeAdjList();
    }

    private void initializeAdjList() {
        for (int v = 1; v <= vertices; v++) {
            adjList.put(v, new HashSet<>());
        }
    }

    public void addEdge(int from, int to) {
        adjList.get(from).add(to);
        adjList.get(to).add(from); // For undirected graph
    }

    public List<Integer> bfs(int start) {
        List<Integer> order = new ArrayList<>();
        boolean[] visited = new boolean[vertices + 1];
        Queue<Integer> queue = new LinkedList<>();

        queue.add(start);
        visited[start] = true;

        while (!queue.isEmpty()) {
            int v = queue.poll();
            order.add(v);

            for (int w : adjList.get(v)) {
                if (!visited[w]) {
                    visited[w] = true;
                    queue.add(w);
                }
            }
        }

        return order;
    }

    public List<Integer> dfs(int start) {
        List<Integer> order = new ArrayList<>();
        boolean[] visited = new boolean[vertices + 1];
        dfsHelper(start, visited, order);
        return order;
    }

    private void dfsHelper(int v, boolean[] visited, List<Integer> order) {
        visited[v] = true;
        order.add(v);

        for (int w : adjList.get(v)) {
            if (!visited[w]) {
                dfsHelper(w, visited, order);
            }
        }
    }

    public boolean isTree() {
        boolean[] visited = new boolean[vertices + 1];
        if (!isConnected(1, visited)) {
            return false; // The graph is not connected
        }

        visited = new boolean[vertices + 1];
        return !containsCycle(1, -1, visited);
    }

    private boolean isConnected(int start, boolean[] visited) {
        Queue<Integer> queue = new LinkedList<>();
        queue.add(start);
        visited[start] = true;

        while (!queue.isEmpty()) {
            int v = queue.poll();

            for (int w : adjList.get(v)) {
                if (!visited[w]) {
                    visited[w] = true;
                    queue.add(w);
                }
            }
        }

        for (int i = 1; i <= vertices; i++) {
            if (!visited[i]) {
                return false; // There is a disconnected component
            }
        }

        return true; // The graph is connected
    }

    private boolean containsCycle(int v, int parent, boolean[] visited) {
        visited[v] = true;

        for (int w : adjList.get(v)) {
            if (!visited[w]) {
                if (containsCycle(w, v, visited)) {
                    return true;
                }
            } else if (w != parent) {
                return true; // Found a back edge
            }
        }

        return false;
    }

    public static void main(String[] args) {
        Graph graph = new Graph(4);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 1);
        graph.addEdge(2, 3);
        graph.addEdge(3, 4);
        graph.addEdge(4, 1);
        graph.addEdge(4, 2);

        List<Integer> bfsOrder = graph.bfs(1);
        List<Integer> dfsOrder = graph.dfs(1);
        boolean isTree = graph.isTree();

        System.out.println("BFS order starting from node 1: " + bfsOrder);
        System.out.println("DFS order starting from node 1: " + dfsOrder);
        System.out.println("Is the graph a tree? " + isTree);
    }
}
